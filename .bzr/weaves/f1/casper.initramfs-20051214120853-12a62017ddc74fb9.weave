# bzr weave file v5
i
1 391933c77ba8d01406b815523ddc69f6ad0d6dac
n tfheen@ubuntu.com-20051214120917-0eae7163985c81fd

i 0
1 8bb1db95daed9397aa0950fc7faae3284da202d8
n tfheen@ubuntu.com-20051214124305-81e6c50220b71a59

i 1
1 f4e6fc42f3329fe627866bd1d67f82df46351e40
n tfheen@ubuntu.com-20051214124642-89138620ced37930

i 2
1 96e7c7cd760d1ea06f2957fff9bda8c759b10039
n tfheen@ubuntu.com-20051214130606-0de0e2952225e999

i 3
1 7d6d5e367845db81ae3ca7c9a7c8efed0987cf18
n tfheen@ubuntu.com-20051214130656-9823b174be137318

i 4
1 7bcff76812f7b5f67a9f14ac0c78cd28ef5967f5
n tfheen@ubuntu.com-20051214130821-7a475ecbea28ec78

i 4
1 7bcff76812f7b5f67a9f14ac0c78cd28ef5967f5
n tfheen@ubuntu.com-20051214130924-6afc3baaec8afcd0

i 6
1 6d31945b1c23f36304504283c67696e850b211d3
n tfheen@ubuntu.com-20051214131115-0c4a7359035044d1

i 7
1 9ba9538c52f3c666129d65d14ac478c2be6b84bb
n tfheen@ubuntu.com-20051214131201-35bfbf665c8b054b

i 8
1 70f2ff293b9991a55e8452419301c849abd2f626
n tfheen@ubuntu.com-20051214131232-af52ed74f91fb717

i 9
1 58ce3d41d4e48adcf84c6ca7802220202039024a
n tfheen@ubuntu.com-20051214132627-4749c4ce7e95989a

i 10
1 5a64c0d2dbb017f53a4b1488af905b1c9f4e5f2f
n tfheen@ubuntu.com-20051214132711-75394bb77e11c559

i 11
1 c5196625d798ac81c300d460932e3e9a999cd072
n tfheen@ubuntu.com-20051214140312-1e06364ef45e19b7

i 12
1 06fe268ed97a2d0a9db0139bd74117a154eb9dd8
n tfheen@ubuntu.com-20051215094048-37dd242c553b6e20

i 13
1 fbdd605243cdb3a67be3b2a21ac97c11bf04e849
n tfheen@ubuntu.com-20051215095632-229550aec480ae83

i 14
1 c7b08884c29a859f0bdf13c60972a2a9c49f8013
n tfheen@ubuntu.com-20051215100529-fae277deb3f30fea

i 15
1 fb8c381a1dde162500cc4310567e5b126b67ae18
n tfheen@ubuntu.com-20051215101842-f3e34ef1c04c2758

i 16
1 c28f115c037fe13819e4623ad3c479e5872e1445
n tfheen@ubuntu.com-20051215103937-14030edfd49b9ec8

i 17
1 6e6dba4b074e65e9298f993db1c24b0743cd408e
n tfheen@ubuntu.com-20051215131344-ebe82457399fe788

i 18
1 2dd3f992d4f0e340d864640766e46cd7111a3ed9
n tfheen@ubuntu.com-20051215141501-5f7ee7f14735373d

i 19
1 403c4405c045af7539910e31213e2868c470d2ba
n tfheen@ubuntu.com-20051216050734-3c595c6c9e44beae

i 20
1 5128d5a4ac716d655f76e538ba229e0746387d59
n tfheen@ubuntu.com-20051216051707-76d5e4b4988a5f9a

i 21
1 1cd4b38930ca710683d2669a524a4bf8e8c7c944
n tfheen@ubuntu.com-20051216052959-d84d0b1aaacd8ae5

i 22
1 01e034b4a2cfa01760e1559d3ee949c2059646cc
n tfheen@ubuntu.com-20051216054945-b543cf3b0b9d0fbc

i 23
1 d99ec2c3bbc6fb079d5494b61966a9804b96730e
n tfheen@ubuntu.com-20051218121838-1c6d966af3954328

i 24
1 992c1dfca228e046dfb9a9226f8afcd94c107190
n tfheen@ubuntu.com-20051219105508-7f4f96c1ab1dd8bb

i 25
1 a9de8efd5e72b74eabf64ea37fa5aa0a79ac38bc
n tfheen@ubuntu.com-20051219121523-7adec0cf8c9c338a

i 26
1 b6cadc5efba053f592b3218f4465783de756913e
n tfheen@ubuntu.com-20051219131857-5ce3baaa1637471d

i 27
1 7f3370abe37589397b1aa649a94027123ebbb2c6
n tfheen@ubuntu.com-20060103095632-02e91f84ca023db6

i 28
1 e106dd7d475680805d6284beccc7e749b0c52cfa
n tfheen@ubuntu.com-20060103111833-1947f5a94872a513

i 29
1 4d5e983d8bf6ffcf1ee05bc08bb6d3eb83f346ca
n tfheen@ubuntu.com-20060109142534-82c558eec36560d5

i 30
1 ccd583cbf839c51336e120e85da49f1e5ac69a61
n tfheen@ubuntu.com-20060109150552-83c5224691efc002

i 31
1 72d31331237cffb08cc81d8076360d6456ccef5d
n tfheen@ubuntu.com-20060110100612-82e0af3a7def57d8

i 32
1 53d554d978742fdcaeb274c0cce3e636687ae165
n tfheen@ubuntu.com-20060110113507-23dce0472cd1d7f7

i 33
1 b7b3094683e332b832f4756bc1b1e837d8dccbb9
n tfheen@ubuntu.com-20060110114433-55272a2421a96694

i 34
1 2a65ab6bbf661bfb680021384908a5bcdd0e4a7d
n tfheen@ubuntu.com-20060110115637-9476ecf6c43f46eb

i 35
1 40cbdb12e9712ea6cbb689fe204a0ee867a2b6c5
n tfheen@ubuntu.com-20060110120653-7b97d01b816bbfa1

i 36
1 ab0cf43d2c93ea36c1d3b4260a242204fe6bb617
n tfheen@ubuntu.com-20060110130011-65eb194bad3a3adb

i 37
1 42b9e586b7c289c0a8775daa9d65ba2c1b824808
n tfheen@ubuntu.com-20060110131611-1fdc6f849f649a3a

i 38
1 dd52f84489a472a19a4664f9f5785eb0e0045473
n tfheen@ubuntu.com-20060110133652-6b03b960030af34a

i 39
1 89e6a875f8ff949b92e78714cf94ad0a48a6edb6
n tfheen@ubuntu.com-20060110135603-cb26a984418a9d05

i 40
1 987ac3a923c3f27e0f4eee2cdb39cf512e2452fd
n tfheen@ubuntu.com-20060110152431-8586697dd35e1ddd

i 41
1 948415e7ac68b9eb531257968ad548022cbda0f1
n tfheen@ubuntu.com-20060110195558-b02d8ded30675ff0

i 42
1 4b2a5a96fb6f15f285253edb05e8c35686f9e710
n tfheen@ubuntu.com-20060130171137-8561c29a6bab30d9

i 43
1 f8b3748331cf210fbbe3c1c0bd09fcb6cece6ec5
n tfheen@ubuntu.com-20060130171200-053a781ef4e1daa6

i 44
1 f9edfa3cae51214043e00c696d3fb892993b713c
n tfheen@ubuntu.com-20060130175728-653909d87f775702

i 45
1 e4d36ef8b49128093c0b5ca3d29da91ca3ade664
n tfheen@ubuntu.com-20060130181751-44c40d356a65d60f

i 46
1 09195c7888e1b71270cdd1c6aecba71c8cc7144c
n tfheen@ubuntu.com-20060130183849-a82ab38880f0a104

i 47
1 6d116a95c8dc951280e5a27ba97dc8fbf32453c6
n tfheen@ubuntu.com-20060130184223-7329393a99ed6ab3

i 48
1 a3be023326cafacdd7f716e1967d389c7657dbab
n tfheen@ubuntu.com-20060130184257-258c77f1ff6c99ff

i 49
1 3f276794dc052aa8dfb257e9d73de713dc79dd85
n tfheen@ubuntu.com-20060130190440-a2e33819bbcd6263

i 50
1 3864675dc26aea44ec8c1d5b24474bfb2ec1f810
n tfheen@ubuntu.com-20060130190507-1fa6828aee1ae94f

i 51
1 abc8c1b9220be27c838943ab81b9e386a991041c
n tfheen@ubuntu.com-20060130221812-118adad70266f7d4

i 52
1 3a24a89685ca2ed3591d868c30aad568944ab7b4
n tfheen@ubuntu.com-20060130222456-17f38cfb63e13193

i 53
1 a25ca2064013094bf1d07ee71da7daa42e33ca44
n tfheen@ubuntu.com-20060130224049-7c24a7b27a5add48

i 54
1 4db2bfc3e011bca41a0aa34edb243ab2e4f0e0c7
n tfheen@ubuntu.com-20060130224610-23f695b548826932

i 55
1 0fea4d24c9eb5ee1e4be966d144dc8ee2cdaf413
n tfheen@ubuntu.com-20060130225402-826b3f10b38da244

i 56
1 908fdd521d7e56ca7aa371a5651f5ca85edcc4b9
n tfheen@ubuntu.com-20060130225546-e02cfe02af3e7562

i 57
1 94ebe80a04f9f5c976bb694e2786a8754c82a965
n tfheen@ubuntu.com-20060130230203-17f794754ccdc937

i 58
1 4975d60c16822e1c6e84714dbdc088449e6e8b3f
n tfheen@ubuntu.com-20060130230247-ead8398bf458dde2

i 59
1 bd089bc21442cb938234081904324d0037211684
n tfheen@ubuntu.com-20060130231430-10a47739cb4120be

i 60
1 0e676097a71ddbbdf10b46252bac12749241f632
n tfheen@ubuntu.com-20060130232136-5e22207da547f33c

i 61
1 9d0d6284a509c63cc3e17ae448ceebaaf1982a0c
n tfheen@ubuntu.com-20060130234120-fa891f67051a2d43

i 62
1 cee6e335dce4f83120871c114386647798f9a910
n tfheen@ubuntu.com-20060131000008-e14353622ded65f3

i 63
1 8844e80fe0c1f6f6320ea07fa84542b835500bf4
n tfheen@ubuntu.com-20060131000828-64a63567e04c88b6

i 64
1 fdf23ef457384c66568658d4cb8d33dfa2c7a5d3
n tfheen@ubuntu.com-20060131000842-0bb21bdb8c18d058

i 65
1 d25180506e2abdebe492b33867f72bbfdf6f5f13
n tfheen@ubuntu.com-20060131001653-651d780984a87b79

i 66
1 c722a92b132a08cba7f875df6a3b8926fcdf4016
n tfheen@ubuntu.com-20060131002329-49de86683d3f3979

i 67
1 e0b67403a2d93523b95fe6ecab428db64ae5dbe0
n tfheen@ubuntu.com-20060131002928-290549115f328553

i 68
1 f2aee6d7557acae5836203f344b583e6f74beb33
n tfheen@ubuntu.com-20060131073327-f918c7bce597abd4

i 69
1 261aa3b924a02e7f01838bc0e8d57cc1863dcb3e
n tfheen@ubuntu.com-20060131074305-91abf273f0becc9e

i 70
1 e0555a1cb229a729ecd0926907c0173d1739edef
n tfheen@ubuntu.com-20060131075042-3904c42e83b397b6

i 71
1 e42796c3caaef7131674b29e0056c5a1acebd45f
n tfheen@ubuntu.com-20060131080343-6491d00d7efbb652

i 72
1 a886b2c7be0030f24ff164df8518c3c7311ec763
n tfheen@ubuntu.com-20060131081016-5953ed4d6142cfa9

i 73
1 b7210e715f274ea0bc7bc2ac9d828edeff62da81
n tfheen@ubuntu.com-20060131081132-69835fd820cba5c0

i 74
1 6c7ccadc17d4d15c67498bf52b9d0f68c23a1fa9
n tfheen@ubuntu.com-20060131083133-db6e3af082df5283

i 75
1 b0a45e5579bcae1145ed540d26c6d76d87b6f43e
n tfheen@ubuntu.com-20060131083739-6b334fe03a2af9a6

i 76
1 9b4fc0adb9dad4cd33df5f56cfd7042963f074e6
n tfheen@ubuntu.com-20060131084328-073c326401cea6b0

w
{ 0
. #!/bin/sh
. 
. # set -e
[ 4
. set -x
] 4
{ 13
[ 16
. set -x
}
] 16
[ 65
. 
[ 56
. mountpoint=/cdrom
] 56
{ 56
[ 62
. mountpoint=/casper/cdrom
] 62
{ 62
] 65
{ 65
. set -x 
}
. mountpoint=/cdrom
}
. 
[ 59
. mkdir /casper
}
. test -d $mountpoint || mkdir $mountpoint 2>/dev/null || true
] 59
{ 59
. mkdir -p $mountpoint
}
. 
[ 21
. casper_path=/casper/filesystem.cloop
[ 18
. 
. get_params() {
. 	for x in $(cat /proc/cmdline); do
. 	        case $x in
. 			casper_path=*)
. 				casper_path=${x#casper_path=}
. 				;;
. 			casper_cow=*)
. 				casper_cow=${x#casper_cow=}
. 				;;
. 		esac
. 	done
. 
. 	fspath=$mountpoint/${casper_path#/}
. }
] 18
{ 18
] 21
{ 21
[ 24
. casper_path=/casper/filesystem.squashfs
}
] 24
{ 24
[ 25
. casper_path=/casper/filesystem.cloop
}
. fspath=$mountpoint/${casper_path#/}
}
{ 24
. 
] 25
. overlay_method=unionfs
[ 42
. if [ "$(uname -m)" = "ppc" ] || [ "$(uname -m)" = "ppc64" ] || [ "$(uname -m)" = "powerpc" ]; then
.     overlay_method=devmapper
. fi
}
] 42
{ 42
. #if [ "$(uname -m)" = "ppc" ] || [ "$(uname -m)" = "ppc64" ] || [ "$(uname -m)" = "powerpc" ]; then
. #    overlay_method=devmapper
. #fi
}
. 
{ 25
. casper_path() {
.     path=$1
.     if [ -e "$path/casper/filesystem.cloop" ]; then
.         echo "$path/casper/filesystem.cloop"
.         return 0
.     elif [ -e "$path/casper/filesystem.squashfs" ]; then
.         echo "$path/casper/filesystem.squashfs"
.         return 0
.     fi
.     return 1
{ 55
. }
. 
. subdevices() {
.     sysblock=$1
.     r=""
.     for dev in "${sysblock}" "${sysblock}"/*; do
.         if [ -e "${dev}/dev" ]; then
.             r="${r} ${dev}"
.         fi
.     done
[ 58
. 
}
] 58
{ 58
.     echo ${r}
}
. }
. 
}
. get_backing_device() {
[ 25
. 	case "$fspath" in
[ 20
. 		*.cloop)
. 			echo $(setup_cloop "$fspath")
] 20
{ 20
] 25
{ 25
. 	case "$1" in
}
.             *.cloop)
[ 25
.                 echo $(setup_loop "$fspath" "cloop" "/sys/block/cloop*")
] 25
{ 25
.                 echo $(setup_loop "$1" "cloop" "/sys/block/cloop*")
}
. 			;;
[ 22
. 		*.squashfs)
. 			echo $(setup_loop "$fspath" "loop" "/sys/block/loop*")
}
. 			;;
. 		*)
. 			panic "Unrecognized casper filesystem: $fspath"
. 			;;
] 22
{ 22
.             *.squashfs)
[ 25
.                 echo $(setup_loop "$fspath" "loop" "/sys/block/loop*")
] 25
{ 25
.                 echo $(setup_loop "$1" "loop" "/sys/block/loop*")
}
.                 ;;
.             *)
[ 25
.                 panic "Unrecognized casper filesystem: $fspath"
] 25
{ 25
.                 panic "Unrecognized casper filesystem: $1"
}
.                 ;;
}
. 	esac
. }
. 
. setup_cow() {
[ 12
. 	casper_cow=unionfs # XXX
. 	case "$casper_cow" in
. 		unionfs)
. 			setup_unionfs "$1" "$rootmnt"
. 			;;
] 12
{ 12
. 	case "$1" in
.             unionfs)
.                 setup_unionfs "$2" "$rootmnt"
.                 ;;
.             devmapper)
.                 setup_devmapper "$2" "$rootmnt"
}
. 	esac
. }
. 
[ 20
. setup_cloop() {
[ 3
. 	modprobe -q cloop
. 	# Wait for udev
. 	while ! [ -e /dev/cloop0 ]; do
. 		sleep 1
. 	done
. 
] 3
{ 3
. 	modprobe -Qb cloop
.         udevplug -W
] 20
{ 20
{ 54
. sys2dev() {
[ 60
.     sysdev=$1
.     udevinfo -q name -p ${sysdev#/sys} 2>/dev/null|| echo /dev/${sysdev##*/}
] 60
{ 60
.     sysdev=${1#/sys}
.     echo "/dev/$(udevinfo -q name -p ${sysdev} 2>/dev/null|| echo ${sysdev##*/})"
}
. }
. 
}
. setup_loop() {
.     local fspath=$1
.     local module=$2
.     local pattern=$3
. 
.     modprobe -Qb "$module"
.     udevplug -W
}
.  
}
[ 5
[ 6
. 	losetup /dev/cloop0 "$fspath"
. 	echo /dev/cloop0
] 5
{ 5
.         for cloopdev in /sys/block/cloop*; do
.             if [ "$(cat $cloopdev/size)" -eq 0 ]; then
.                 dev=$(udevinfo -q name -p ${cloopdev#/sys})
.                losetup "$dev" "$fspath"
.                 echo "$dev"
.                 return 0
.             fi
.         done
.         return 1
}
] 6
{ 6
[ 20
.         for cloopdev in /sys/block/cloop*; do
.             if [ "$(cat $cloopdev/size)" -eq 0 ]; then
[ 7
.                 dev=$(udevinfo -q name -p ${cloopdev#/sys})
] 7
{ 7
[ 8
.                 dev=$(udevinfo -q name -p ${cloopdev#/sys} || echo $cloopdev)
}
] 8
{ 8
[ 9
.                 dev=$(udevinfo -q name -p ${cloopdev#/sys} || echo /dev/${cloopdev##*/)
}
] 9
{ 9
[ 11
.                 dev=$(udevinfo -q name -p ${cloopdev#/sys} || echo /dev/${cloopdev##*/})
}
] 11
{ 11
.                 dev=$(udevinfo -q name -p ${cloopdev#/sys} 2>/dev/null|| echo /dev/${cloopdev##*/})
}
.                losetup "$dev" "$fspath"
.                 echo "$dev"
.                 return 0
.             fi
.         done
.         return 1
}
] 20
{ 20
.     for loopdev in $pattern; do
.         if [ "$(cat $loopdev/size)" -eq 0 ]; then
[ 54
.             dev=$(udevinfo -q name -p ${loopdev#/sys} 2>/dev/null|| echo /dev/${loopdev##*/})
] 54
{ 54
.             dev=$(sys2dev "${loopdev}")
}
.             losetup "$dev" "$fspath"
.             echo "$dev"
.             return 0
.         fi
.     done
[ 73
.     return 1
}
] 73
{ 73
.     panic "No loop devices available"
}
. }
. 
. get_fstype() {
[ 48
.              local FSTYPE
.              local FSSIZE
.              eval $(fstype < $1)
.              echo $FSTYPE
{ 12
] 48
{ 48
[ 50
.              local ID_FS_TYPE
.              eval $(udevinfo -n $1 -q env 2>/dev/null| grep ID_FS_TYPE) || ID_FS_TYPE="unknown"
.              echo "${ID_FS_TYPE}"
}
] 50
{ 50
[ 53
.     /lib/udev/vol_id -t $1 2>/dev/null || echo "unknown"
}
] 53
{ 53
[ 70
.     /lib/udev/vol_id -t $1 2>/dev/null || {
.         local FSTYPE
.         local FSSIZE
.         eval $(fstype $1)
] 70
{ 70
{ 75
[ 76
.     set -x
}
] 76
.     local FSTYPE
.     local FSSIZE
.     eval $(fstype $1)
.     if [ "$FSTYPE" != "unknown" ]; then
}
.         echo $FSTYPE
[ 70
.         } || echo "unknown"
}
] 70
{ 70
.         return 0
.     fi
.     /lib/udev/vol_id -t $1 2>/dev/null
}
. }
. 
. setup_devmapper() {
{ 14
[ 18
.     set -x
}
] 18
.     backdev="$1"
.     rootmnt="$2"
. 
.     modprobe -Qb dm-mod
.     COW_DEVICE=/dev/ram1
.     COW_NAME="casper-cow"
. 
[ 17
.     BACKING_FILE_SIZE=$(blockdev --getsize "$LOOP_DEVICE")
] 17
{ 17
.     BACKING_FILE_SIZE=$(blockdev --getsize "$backdev")
}
.     MAX_COW_SIZE=$(blockdev --getsize "$COW_DEVICE")
.     CHUNK_SIZE=8 # sectors
. 
.     if [ -z "$COW_SIZE" -o "$COW_SIZE" -gt "$MAX_COW_SIZE" ]; then
.         COW_SIZE=$MAX_COW_SIZE
.     fi
. 
.     echo "0 $COW_SIZE linear $COW_DEVICE 0" | dmsetup create $COW_NAME
. 
[ 15
.     echo "0 $BACKING_FILE_SIZE snapshot $backdev */dev/mapper/$COW_NAME p $CHUNK_SIZE" | \
] 15
{ 15
.     echo "0 $BACKING_FILE_SIZE snapshot $backdev /dev/mapper/$COW_NAME p $CHUNK_SIZE" | \
}
.         dmsetup create casper-snapshot
[ 27
. 	mount -t $(get_fstype "$backdev") /dev/mapper/casper-snapshot $rootmnt
] 27
{ 27
[ 28
. 	mount -t $(get_fstype "$backdev") /dev/mapper/casper-snapshot $rootmnt || panic "Can not mount /dev/mapper/casper/snapshot on $rootmnt"
}
] 28
{ 28
.     if [ "$(get_fstype $backdev)" = "unknown" ]; then
.         panic "Unknown file system type on $backdev"
.     fi
.     mount -t $(get_fstype "$backdev") /dev/mapper/casper-snapshot $rootmnt || panic "Can not mount /dev/mapper/casper/snapshot on $rootmnt"
}
. 
}
{ 30
[ 59
.     mkdir "$rootmnt/rofs"
[ 31
.     mount -t $(get_fstype "$backdev") "$backdev" "$rootmnt/rofs"
}
] 31
{ 31
] 59
{ 59
.     mkdir -p "$rootmnt/rofs"
}
.     echo "0 $BACKING_FILE_SIZE linear $backdev 0" | dmsetup create casper-backing
.     mount -t $(get_fstype "$backdev") /dev/mapper/casper-backing "$rootmnt/rofs"
}
. }
. 
{ 36
{ 63
. where_is_mounted() {
.     device=$1
.     if grep -q "^$device " /proc/mounts; then
.         grep "^$device " /proc/mounts | read d mountpoint rest
.         echo $mountpoint
{ 66
.         return 0
}
.     fi
.     return 1
. }
. 
}
. find_cow_device() {
{ 37
{ 69
[ 73
.     set -x
}
] 73
[ 74
.     udevplug -b
}
[ 71
.     for sysblock in /sys/block/*; do
[ 37
.         devname=$(udevinfo -q name -p ${sysblock#/sys})
] 37
{ 37
[ 54
.         devname=$(udevinfo -q name -p ${sysblock#/sys} 2>/dev/null || echo ${sysblock##*/})
}
.         for part in /dev/$devname*; do
[ 38
.             if [ "$(/lib/udev/vol_id -l $part)" = "casper-cow"]; then
] 38
{ 38
[ 40
.             if [ "$(/lib/udev/vol_id -l $part)" = "casper-cow" ]; then
}
[ 39
.                 echo "/dev/$part"
] 39
{ 39
] 40
{ 40
] 54
{ 54
[ 55
.         devname=$(sys2dev "${sysblock}")
.         for part in $devname*; do
}
.             if [ "$(/lib/udev/vol_id -l $part 2>/dev/null)" = "casper-cow" ]; then
}
] 55
{ 55
] 71
{ 71
] 74
.     for sysblock in $(echo /sys/block/* | tr ' ' '\n' | grep -v loop); do
}
.         for dev in $(subdevices "${sysblock}"); do
.             devname=$(sys2dev "${dev}")
.             if [ "$(/lib/udev/vol_id -l $devname 2>/dev/null)" = "casper-cow" ]; then
}
.                 echo "$part"
}
.                 return
{ 56
.             elif [ "$(get_fstype ${devname})" = "vfat" ]; then
[ 59
.                 mkdir /casper/cow-backing
] 59
{ 59
[ 62
.                 mkdir -p /casper/cow-backing
}
.                 mount -t $(get_fstype "${devname}") -o rw "${devname}" /casper/cow-backing
[ 57
.                 if [ -e "/cow-backing/casper-rw" ]; then
.                     setup_loop "/cow-backing/casper-rw" "loop" "/sys/block/loop*"
] 57
{ 57
.                 if [ -e "/casper/cow-backing/casper-rw" ]; then
.                     setup_loop "/casper/cow-backing/casper-rw" "loop" "/sys/block/loop*"
}
] 62
{ 62
.                 mkdir -p /cow-backing
[ 63
.                 mount -t $(get_fstype "${devname}") -o rw "${devname}" /cow-backing
] 63
{ 63
[ 77
.                 if where_is_mounted ${devname}; then
[ 64
.                     mount -o remount,rw ${devname}
.                     mount -o bind $(where_is_mounted ${devname}) /cow-backing
] 64
{ 64
[ 67
.                     mount -o remount,rw ${devname} || panic "Remounting failed"
] 67
{ 67
[ 68
.                     mount -o remount,rw ${devname} $(where_is_mounted ${devname}|| panic "Remounting failed"
}
] 68
{ 68
] 77
{ 77
.                 if where_is_mounted ${devname} > /dev/null; then
}
.                     mount -o remount,rw ${devname} $(where_is_mounted ${devname}) || panic "Remounting failed"
}
.                     mount -o bind $(where_is_mounted ${devname}) /cow-backing || panic "Cannot bind-mount"
}
.                 else
[ 64
.                     mount -t $(get_fstype "${devname}") -o rw "${devname}" /cow-backing
] 64
{ 64
.                     mount -t $(get_fstype "${devname}") -o rw "${devname}" /cow-backing || panic "Cannot mount $devname on /cow-backin"
}
.                 fi
. 
}
.                 if [ -e "/cow-backing/casper-rw" ]; then
[ 72
.                     setup_loop "/cow-backing/casper-rw" "loop" "/sys/block/loop*"
}
] 72
{ 72
.                     echo $(setup_loop "/cow-backing/casper-rw" "loop" "/sys/block/loop*")
.                     return 0
}
.                 else
[ 62
.                     umount /casper/cow-backing
] 62
{ 62
.                     umount /cow-backing
}
.                 fi
}
.             fi
{ 56
.             
}
.         done
.     done
[ 72
.     
] 72
{ 72
.     return 1    
}
. }
. 
}
. setup_unionfs() {
. 	backdev="$1"
. 	rootmnt="$2"
{ 33
[ 36
.         cowdevice=/dev/disk/by-label/casper-cow # Used if available, else tmpfs
}
] 36
{ 36
[ 76
. 
[ 41
.         cowdevice=$(find_cow_device) # or tmpfs, if it's not a block device
}
] 41
{ 41
] 76
{ 76
.         set -x
}
.         modprobe -Qb unionfs
[ 56
.         mkdir /cow
}
] 56
{ 56
[ 59
.         mkdir /casper/cow
}
] 59
{ 59
[ 62
.         mkdir -p /casper/cow
}
] 62
{ 62
.         mkdir -p /cow
}
. 
[ 3
. 	modprobe -q unionfs
] 3
{ 3
[ 41
. 	modprobe -Qb unionfs
}
. 	mkdir /cow
[ 33
. 	mount -t tmpfs tmpfs /cow
] 33
{ 33
. 	if [ -b "$cowdevice" ]; then
.             mount -t $(get_fstype "$cowdevice") -o rw "$cowdevice" /cow || panic "Can not mount $cowdevice on /cow"
] 41
{ 41
.         if grep -q persistent /proc/cmdline; then
.             i=0
.             # We love udev and the kernel!
.             while [ "$i" -lt 300 ]; do
.                 cowdevice=$(find_cow_device) 
.                 if [ -b "$cowdevice" ]; then
[ 61
.                     mount -t $(get_fstype "$cowdevice") -o rw "$cowdevice" /cow || panic "Can not mount $cowdevice on /cow"
] 61
{ 61
[ 62
.                     mount -t $(get_fstype "$cowdevice") -o rw "$cowdevice" /casper/cow || panic "Can not mount $cowdevice on /cow"
}
] 62
{ 62
.                     mount -t $(get_fstype "$cowdevice") -o rw "$cowdevice" /cow || panic "Can not mount $cowdevice on /cow"
}
.                     break
.                 fi
[ 76
.                 sleep 0.1
] 76
{ 76
.                 sleep 5
. #                sleep 0.1
}
.                 i=$(( $i + 1 ))
.             done
}
.         else
[ 61
.             mount -t tmpfs tmpfs /cow
] 61
{ 61
[ 62
.             mount -t tmpfs tmpfs /casper/cow
}
.         fi
}
. 
[ 56
. 	mkdir /rofs
[ 23
. 	mount -t $(get_fstype "$backdev") "$backdev" /rofs
] 23
{ 23
[ 27
. 	mount -t $(get_fstype "$backdev") -o ro "$backdev" /rofs
}
] 27
{ 27
{ 29
] 56
{ 56
[ 59
. 	mkdir /casper/rofs
}
] 59
{ 59
. 	mkdir -p /casper/rofs
}
] 62
{ 62
.             mount -t tmpfs tmpfs /cow
.         fi
. 
. 	mkdir -p /rofs
}
.     if [ "$(get_fstype $backdev)" = "unknown" ]; then
.         panic "Unknown file system type on $backdev"
.     fi
}
[ 61
. 	mount -t $(get_fstype "$backdev") -o ro "$backdev" /rofs || panic "Can not mount $backdev on /rofs"
}
. 
. 	mount -t unionfs -o dirs=/cow=rw:/rofs=ro unionfs "$rootmnt"
{ 30
] 61
{ 61
[ 62
. 	mount -t $(get_fstype "$backdev") -o ro "$backdev" /casper/rofs || panic "Can not mount $backdev on /casper/rofs"
. 
. 	mount -t unionfs -o dirs=/casper/cow=rw:/casper/rofs=ro unionfs "$rootmnt"
}
] 62
{ 62
. 	mount -t $(get_fstype "$backdev") -o ro "$backdev" /rofs || panic "Can not mount $backdev on /rofs"
. 
. 	mount -t unionfs -o dirs=/cow=rw:/rofs=ro unionfs "$rootmnt"
}
. 
[ 59
.         mkdir "$rootmnt/rofs"
[ 56
.         mount -o bind /rofs "$rootmnt/rofs"
}
] 56
{ 56
] 59
{ 59
.         mkdir -p "$rootmnt/rofs"
}
[ 62
.         mount -o bind /casper/rofs "$rootmnt/rofs"
}
] 62
{ 62
.         mount -o bind /rofs "$rootmnt/rofs"
}
. }
. 
{ 43
. is_usb_device() {
.     sysfs_path="${1#/sys}"
[ 52
.     if /lib/udev/path_id "${sysfs_path}" | grep "ID_PATH=usb"; then
] 52
{ 52
.     if /lib/udev/path_id "${sysfs_path}" | grep -q "ID_PATH=usb"; then
}
.         return 0
.     fi
.     return 1
. }
. 
}
. find_cd() {
. 	mounted=
[ 71
.         for sysblock in /sys/block/*; do
[ 46
.             devname=$(udevinfo -q name -p ${sysblock#/sys})
] 46
{ 46
[ 49
.             devname="/dev/$(udevinfo -q name -p ${sysblock#/sys})"
}
] 49
{ 49
[ 54
.             devname="/dev/$(udevinfo -q name -p ${sysblock#/sys} 2>/dev/null)"
}
.             if /lib/udev/cdrom_id /dev/$devname > /dev/null; then
[ 18
. 
[ 10
.                 mount -t iso9660 "/dev/$devname" $mountpoint || continue
] 10
{ 10
] 18
[ 43
.                 mount -t iso9660 -o ro "/dev/$devname" $mountpoint || continue
}
[ 25
.                 if [ -e "$fspath" ]; then
] 25
{ 25
[ 26
.                 if casper_path $mountpoint;
] 26
{ 26
] 43
{ 43
[ 46
.                 mount -t $(get_fstype "/dev/$devname") -o ro "/dev/$devname" $mountpoint || continue
}
] 46
{ 46
] 54
{ 54
] 71
{ 71
.         for sysblock in $(echo /sys/block/* | tr ' ' '\n' | grep -v loop | grep -v ram); do
}
.             devname=$(sys2dev "${sysblock}")
.             if /lib/udev/cdrom_id ${devname} > /dev/null; then
}
.                 mount -t $(get_fstype "${devname}") -o ro "$devname" $mountpoint || continue
}
.                 if casper_path $mountpoint; then
}
.                     echo $(casper_path $mountpoint)
}
[ 43
.                     return;
] 43
{ 43
.                     return
}
.                 else
.                     umount $mountpoint
.                 fi
{ 43
.             elif is_usb_device "$sysblock"; then
[ 45
.                 case $(get_fstype "${devname}"); in
] 45
{ 45
[ 47
.                 case $(get_fstype "${devname}") in
}
.                     vfat|iso9660|udf)
[ 46
.                         mount -t $(get_fstype "/dev/$devname") -o ro "/dev/$devname" $mountpoint || continue
] 46
{ 46
.                         mount -t $(get_fstype "${devname}") -o ro "${devname}" $mountpoint || continue
}
.                         if casper_path $mountpoint; then
.                             echo $(casper_path $mountpoint)
.                             return
.                         else
.                             umount $mountpoint
.                         fi
.                         ;;
.                 esac
}
] 47
{ 47
[ 55
.                 for dev in "${sysblock}" "${sysblock}"/*; do
.                     if [ -e "${dev}/dev" ]; then
[ 49
.                         devname="/dev/$(udevinfo -q name -p ${sysblock#/sys})"
] 49
{ 49
[ 51
.                         devname="/dev/$(udevinfo -q name -p ${sysblock#/sys} 2>/dev/null)"
}
] 51
{ 51
[ 54
.                         devname="/dev/$(udevinfo -q name -p ${dev#/sys} 2>/dev/null)"
}
] 54
{ 54
.                         devname=$(sys2dev "${dev}")
}
.                         case $(get_fstype "${devname}") in
.                             vfat|iso9660|udf)
.                                 mount -t $(get_fstype "${devname}") -o ro "${devname}" $mountpoint || continue
.                                 if casper_path $mountpoint; then
.                                     echo $(casper_path $mountpoint)
.                                     return
.                                 else
.                                     umount $mountpoint
.                                 fi
.                                 ;;
.                         esac
.                     fi
] 55
{ 55
.                 for dev in $(subdevices "${sysblock}"); do
.                     devname=$(sys2dev "${dev}")
.                     case $(get_fstype "${devname}") in
.                         vfat|iso9660|udf)
.                             mount -t $(get_fstype "${devname}") -o ro "${devname}" $mountpoint || continue
.                             if casper_path $mountpoint; then
.                                 echo $(casper_path $mountpoint)
.                                 return
.                             else
.                                 umount $mountpoint
.                             fi
.                             ;;
.                     esac
}
.                 done
}
.             fi
.         done
[ 25
. 
.         panic "Unable to find a CD-ROM containing '$casper_path'"
] 25
. }
. 
. mountroot() {
{ 2
[ 4
.     set -x
}
] 4
[ 32
. 	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-premount"
. 	run_scripts /scripts/casper-premount
. 	[ "$quiet" != "y" ] && log_end_msg
{ 2
[ 4
.     set -x
}
] 4
[ 18
. 	get_params
] 18
[ 25
. 	find_cd
[ 12
. 	setup_cow "$(get_backing_device)" "$rootmnt"
] 12
{ 12
[ 13
. 	setup_cow unionfs "$(get_backing_device)" "$rootmnt"
}
] 13
{ 13
[ 19
. 	setup_cow devmapper "$(get_backing_device)" "$rootmnt"
}
] 19
{ 19
[ 24
. 	setup_cow unionfs "$(get_backing_device)" "$rootmnt"
}
] 24
{ 24
. 	setup_cow "$overlay_method" "$(get_backing_device)" "$rootmnt"
}
] 25
{ 25
. 	live_image=$(find_cd)
.         if [ "$?" -gt 0 ]; then
.             panic "Unable to find a CD-ROM containing a live file system"
.         fi
. 	setup_cow "$overlay_method" "$(get_backing_device $live_image)" "$rootmnt"
}
. 	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-bottom"
[ 1
. 	run_scripts /scripts/casper-bottom
] 1
{ 1
{ 2
[ 4
.     set -x
}
] 4
. 	PATH=/root/usr/bin:/root/usr/sbin:/root/bin:/root/sbin:$PATH run_scripts /scripts/casper-bottom
}
{ 2
[ 4
.     set -x
}
] 4
. 	[ "$quiet" != "y" ] && log_end_msg
] 32
{ 32
.     if [ -x /sbin/usplash_write ]; then
.         /sbin/usplash_write "TIMEOUT 120"
.     fi
.     
.     
.     [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-premount"
.     run_scripts /scripts/casper-premount
.     [ "$quiet" != "y" ] && log_end_msg
{ 34
. 
}
[ 44
.     live_image=$(find_cd)
] 44
{ 44
.     for i in 0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 13; do
.         live_image=$(find_cd)
.         if [ "${live_image}" ]; then
.             break
.         fi
.         sleep 1
.     done
}
.     if [ "$?" -gt 0 ]; then
.         panic "Unable to find a CD-ROM containing a live file system"
.     fi
[ 34
.     log_msg_end
] 34
.     
.     setup_cow "$overlay_method" "$(get_backing_device $live_image)" "$rootmnt"
{ 34
. 
[ 35
.     log_msg_end
] 35
{ 35
.     log_end_msg
}
. 
}
.     [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-bottom"
.     PATH=/root/usr/bin:/root/usr/sbin:/root/bin:/root/sbin:$PATH run_scripts /scripts/casper-bottom
.     [ "$quiet" != "y" ] && log_end_msg
}
. }
}
W
